
var 
	EventEmitter = require('events').EventEmitter,
	url = require('url')
;

var request = {
    'http': require('http').request,
    'https': require('https').request
};

module.exports = function (wsdl, action, targetUrl, name, info, options) {
    var targetOpts = url.parse(targetUrl);
    var r = request[targetOpts.protocol.replace(/[^a-z]/g, '')];

    if (options.proxy) {
        r = request[options.proxy.protocol.replace(/[^a-z]/g, '')];

        targetOpts = options.proxy;
        targetOpts.path = targetUrl;
    }

    if (options.authorization) if (options.authorization.basic) {
        with (options.authorization.basic) targetOpts.auth = user + ':' + password;
    }

    targetOpts.method = 'POST';
    targetOpts.headers = {
        'SOAPAction': action,
        'Content-Type': 'text/xml'
    };

    var reciver = require('./reciever')(wsdl, info.output);

    return function () {
        var ee = new EventEmitter(), a = arguments;

        var content = '<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/"><Body><' + name + ' xmlns="' + wsdl.parametersNs + '">\n';

        function writeData(value, param) {
            content += '\t<' + param.name + '>';
            if (param.complexType) {
                var type = wsdl.types[param.complexType];
                for (var i in type) {
                    var currentPart = type[i];
                    if (typeof (value[i]) == 'undefined' || value[i] === null) {
                        // Not defined
                        if (currentPart.minOccurs > 0) throw new Error("Parameter " + i + " is required");
                    } else if (value[i] instanceof Array) {
                        if (value[i].length < ct.minOccurs) throw new Error("Parameter " + i + " is required at least " + ct.minOccurs + " times");
                        if (currentPart.maxOccurs != 'unbounded' && value[i].length > currentPart.maxOccurs) throw new Error("Parameter " + i + " can be maximally " + ct.minOccurs + " times");

                        value[i].forEach(function (part) { writeData(part, currentPart); });
                    } else {
                        if (ct.minOccurs > 1) throw new Error("Parameter " + i + " is required at least twice");

                        writeData(part[i], currentPart);
                    }
                }
            } else if (param.baseType) {
                switch (param.baseType) {
                    case 'int':
                        var v = parseInt(value);
                        if (isNaN(v)) throw new Error(p + " isn't Integer");
                        content += v;
                        break;
                    case 'string':
                        content += value;
                        break;
                    case 'float':
                        var v = parseFloat(value);
                        if (isNaN(v)) throw new Error(p + " isn't Float");
                        content += v;
                        break;
                    default:
                        throw new Error("Unknown type " + iDef.baseType);
                }
            }

            content += '</' + param.name + '>\n';
        }

        wsdl.messages[info.input].forEach(function (param, i) {
            if (a.length <= i) return;

            writeData(a[i], param);
        });

        content += '</' + name + '></Body></Envelope>';

        targetOpts.headers['Content-length'] = content.length;

        r = r(targetOpts, function (res) {
            if (res.statusCode != 200) {
                ret.emit('error', new Error("Service respond with invalid code " + res.statusCode));
            } else {
                reciver(res, function (err, data) {
                    if (err) return ee.emit('error', err);

                    ee.emit('done', data);
                });
            }
        })

        r.write(content)
        r.end();

        return ee;
    }
}